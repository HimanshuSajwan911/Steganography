package gui.stegano;

import gui.image.*;
import gui.Main;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.Slider;
import static javafx.scene.input.DataFormat.IMAGE;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static steganography.core.Steganography.KB;
import static steganography.core.Steganography.MB;
import steganography.core.exceptions.InsufficientBitsException;
import steganography.core.exceptions.InsufficientMemoryException;
import steganography.core.exceptions.InvalidKeyException;
import steganography.core.exceptions.UnsupportedFileException;
import static steganography.core.util.Files.setImageFileExtension;

/**
 *
 * @author Himanshu Sajwan.
 */
public class Steganography extends javax.swing.JFrame {

    private File COVER_FILE;
    private File DATA_FILE;
    private File DESTINATION_FILE;
    
    private int KEY;
    private int OFFSET;
    private int BUFFER_CAPACITY;
    
    /**
     * Creates new form ImageSteganography
     */
    public Steganography() {
        initComponents();
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BufferCapacitybuttonGroup = new javax.swing.ButtonGroup();
        MainPanel = new javax.swing.JPanel();
        DestinationButton = new javax.swing.JButton();
        CoverFileButton = new javax.swing.JButton();
        DestinationLabel = new javax.swing.JLabel();
        DataFilePath = new javax.swing.JLabel();
        DataFileButton = new javax.swing.JButton();
        DataFileLabel = new javax.swing.JLabel();
        DecodeButton = new javax.swing.JButton();
        EncodeButton = new javax.swing.JButton();
        KeyButton = new javax.swing.JButton();
        BuffersSizeButton = new javax.swing.JButton();
        OffsetButton = new javax.swing.JButton();
        BufferSizeLabel = new javax.swing.JLabel();
        CoverFileLabel = new javax.swing.JLabel();
        DestinationPath = new javax.swing.JLabel();
        CoverFilePath = new javax.swing.JLabel();
        BackButton = new javax.swing.JButton();
        OffsetLabel = new javax.swing.JLabel();
        KeyLabel = new javax.swing.JLabel();
        ShowHideKeyToggleButton = new javax.swing.JToggleButton();
        KBRadioButton = new javax.swing.JRadioButton();
        MBRadioButton = new javax.swing.JRadioButton();
        GBRadioButton = new javax.swing.JRadioButton();
        backgroundImageLabel = new javax.swing.JLabel();
        MainMenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        CoverFileMenuItem = new javax.swing.JMenuItem();
        DataFileMenuItem = new javax.swing.JMenuItem();
        DestinationMenuItem = new javax.swing.JMenuItem();
        EncodeMenuItem = new javax.swing.JMenuItem();
        DecodeMenuItem = new javax.swing.JMenuItem();
        BufferSizeMenu = new javax.swing.JMenu();
        KeyMenuItem = new javax.swing.JMenuItem();
        OffsetMenuItem = new javax.swing.JMenuItem();
        BufferSizeMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        MainPanel.setLayout(null);

        DestinationButton.setFont(new java.awt.Font("Consolas", 0, 15)); // NOI18N
        DestinationButton.setText("Destination");
        DestinationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DestinationButtonActionPerformed(evt);
            }
        });
        MainPanel.add(DestinationButton);
        DestinationButton.setBounds(460, 160, 120, 30);

        CoverFileButton.setFont(new java.awt.Font("Consolas", 0, 15)); // NOI18N
        CoverFileButton.setText("Cover");
        CoverFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoverFileButtonActionPerformed(evt);
            }
        });
        MainPanel.add(CoverFileButton);
        CoverFileButton.setBounds(460, 40, 120, 30);

        DestinationLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        DestinationLabel.setText("Destination:");
        DestinationLabel.setToolTipText("Location where encoded file to be saved.");
        MainPanel.add(DestinationLabel);
        DestinationLabel.setBounds(20, 160, 80, 30);

        DataFilePath.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        DataFilePath.setText("--------------------------------------------------------------------");
        DataFilePath.setToolTipText("File that will contain Data File.");
        MainPanel.add(DataFilePath);
        DataFilePath.setBounds(110, 100, 350, 30);

        DataFileButton.setFont(new java.awt.Font("Consolas", 0, 15)); // NOI18N
        DataFileButton.setText("Data");
        DataFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataFileButtonActionPerformed(evt);
            }
        });
        MainPanel.add(DataFileButton);
        DataFileButton.setBounds(460, 100, 120, 30);

        DataFileLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        DataFileLabel.setText("Data File:");
        DataFileLabel.setToolTipText("File that to be Hidden.");
        MainPanel.add(DataFileLabel);
        DataFileLabel.setBounds(20, 100, 80, 30);

        DecodeButton.setFont(new java.awt.Font("Times New Roman", 0, 40)); // NOI18N
        DecodeButton.setText("Decode");
        DecodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecodeButtonActionPerformed(evt);
            }
        });
        MainPanel.add(DecodeButton);
        DecodeButton.setBounds(350, 420, 210, 70);

        EncodeButton.setFont(new java.awt.Font("Times New Roman", 0, 40)); // NOI18N
        EncodeButton.setText("Encode");
        EncodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncodeButtonActionPerformed(evt);
            }
        });
        MainPanel.add(EncodeButton);
        EncodeButton.setBounds(40, 420, 210, 70);

        KeyButton.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        KeyButton.setText("Key");
        KeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeyButtonActionPerformed(evt);
            }
        });
        MainPanel.add(KeyButton);
        KeyButton.setBounds(40, 350, 100, 40);

        BuffersSizeButton.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        BuffersSizeButton.setText("Buffer Size");
        BuffersSizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuffersSizeButtonActionPerformed(evt);
            }
        });
        MainPanel.add(BuffersSizeButton);
        BuffersSizeButton.setBounds(350, 270, 90, 40);

        OffsetButton.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        OffsetButton.setText("Offset");
        OffsetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OffsetButtonActionPerformed(evt);
            }
        });
        MainPanel.add(OffsetButton);
        OffsetButton.setBounds(350, 350, 90, 40);

        BufferSizeLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        MainPanel.add(BufferSizeLabel);
        BufferSizeLabel.setBounds(440, 270, 140, 40);

        CoverFileLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        CoverFileLabel.setText("Cover File:");
        CoverFileLabel.setToolTipText("File that will contain Data File.");
        MainPanel.add(CoverFileLabel);
        CoverFileLabel.setBounds(20, 40, 80, 30);

        DestinationPath.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        DestinationPath.setText("--------------------------------------------------------------------");
        DestinationPath.setToolTipText("File that will contain Data File.");
        MainPanel.add(DestinationPath);
        DestinationPath.setBounds(110, 160, 350, 30);

        CoverFilePath.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        CoverFilePath.setText("--------------------------------------------------------------------");
        CoverFilePath.setToolTipText("File that will contain Data File.");
        MainPanel.add(CoverFilePath);
        CoverFilePath.setBounds(110, 40, 350, 30);

        BackButton.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        BackButton.setText("<< Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });
        MainPanel.add(BackButton);
        BackButton.setBounds(500, 540, 90, 40);

        OffsetLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        MainPanel.add(OffsetLabel);
        OffsetLabel.setBounds(450, 350, 140, 40);

        KeyLabel.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        MainPanel.add(KeyLabel);
        KeyLabel.setBounds(140, 350, 140, 40);

        ShowHideKeyToggleButton.setText("Show Key");
        ShowHideKeyToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowHideKeyToggleButtonActionPerformed(evt);
            }
        });
        MainPanel.add(ShowHideKeyToggleButton);
        ShowHideKeyToggleButton.setBounds(40, 270, 100, 40);

        BufferCapacitybuttonGroup.add(KBRadioButton);
        KBRadioButton.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        KBRadioButton.setText("1 KB");
        KBRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KBRadioButtonActionPerformed(evt);
            }
        });
        MainPanel.add(KBRadioButton);
        KBRadioButton.setBounds(350, 310, 70, 25);

        BufferCapacitybuttonGroup.add(MBRadioButton);
        MBRadioButton.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        MBRadioButton.setText("1 MB");
        MBRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBRadioButtonActionPerformed(evt);
            }
        });
        MainPanel.add(MBRadioButton);
        MBRadioButton.setBounds(420, 310, 70, 25);

        BufferCapacitybuttonGroup.add(GBRadioButton);
        GBRadioButton.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        GBRadioButton.setText("1 GB");
        GBRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GBRadioButtonActionPerformed(evt);
            }
        });
        MainPanel.add(GBRadioButton);
        GBRadioButton.setBounds(490, 310, 70, 25);
        MainPanel.add(backgroundImageLabel);
        backgroundImageLabel.setBounds(150, 0, 270, 40);

        FileMenu.setText("File");

        CoverFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        CoverFileMenuItem.setText("Cover File");
        CoverFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoverFileMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(CoverFileMenuItem);

        DataFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        DataFileMenuItem.setText("Data File");
        DataFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataFileMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(DataFileMenuItem);

        DestinationMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        DestinationMenuItem.setText("Destination");
        DestinationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DestinationMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(DestinationMenuItem);

        EncodeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK));
        EncodeMenuItem.setText("Encode");
        EncodeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncodeMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(EncodeMenuItem);

        DecodeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK));
        DecodeMenuItem.setText("Decode");
        DecodeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecodeMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(DecodeMenuItem);

        MainMenuBar.add(FileMenu);

        BufferSizeMenu.setText("Edit");

        KeyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.SHIFT_MASK));
        KeyMenuItem.setText("Key");
        KeyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeyMenuItemActionPerformed(evt);
            }
        });
        BufferSizeMenu.add(KeyMenuItem);

        OffsetMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK));
        OffsetMenuItem.setText("Offset");
        OffsetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OffsetMenuItemActionPerformed(evt);
            }
        });
        BufferSizeMenu.add(OffsetMenuItem);

        BufferSizeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.SHIFT_MASK));
        BufferSizeMenuItem.setText("Buffer Size");
        BufferSizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BufferSizeMenuItemActionPerformed(evt);
            }
        });
        BufferSizeMenu.add(BufferSizeMenuItem);

        MainMenuBar.add(BufferSizeMenu);

        setJMenuBar(MainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed

        Main.mainmenu.setVisible(true);
        
        this.dispose();
        
    }//GEN-LAST:event_BackButtonActionPerformed

    private void CoverFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoverFileMenuItemActionPerformed
       
        openCoverFile();
        
    }//GEN-LAST:event_CoverFileMenuItemActionPerformed

    private void DataFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataFileMenuItemActionPerformed
       
        openDataFile();
        
    }//GEN-LAST:event_DataFileMenuItemActionPerformed

    private void CoverFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoverFileButtonActionPerformed
        
        openCoverFile();
        
    }//GEN-LAST:event_CoverFileButtonActionPerformed

    private void KeyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeyMenuItemActionPerformed
      
        readKey();
        
    }//GEN-LAST:event_KeyMenuItemActionPerformed

    private void KeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeyButtonActionPerformed

        readKey();
        
    }//GEN-LAST:event_KeyButtonActionPerformed

    private void DataFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataFileButtonActionPerformed

       openDataFile();
        
    }//GEN-LAST:event_DataFileButtonActionPerformed

    private void DestinationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DestinationButtonActionPerformed

        try {
            setDestination();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR!!", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_DestinationButtonActionPerformed

    private void DestinationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DestinationMenuItemActionPerformed

        try {
            setDestination();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR!!", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_DestinationMenuItemActionPerformed

    private void OffsetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OffsetButtonActionPerformed

       readOffset();
        
    }//GEN-LAST:event_OffsetButtonActionPerformed

    private void OffsetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OffsetMenuItemActionPerformed

        readOffset();
        
    }//GEN-LAST:event_OffsetMenuItemActionPerformed

    private void ShowHideKeyToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowHideKeyToggleButtonActionPerformed
        
        if(ShowHideKeyToggleButton.isSelected()){
            ShowHideKeyToggleButton.setText("Hide Key");
        }
        else{
            ShowHideKeyToggleButton.setText("Show Key");
        }
        printKey();
        
    }//GEN-LAST:event_ShowHideKeyToggleButtonActionPerformed

    private void EncodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncodeButtonActionPerformed

        if(encode() == 0){
            reset();
        }
                
    }//GEN-LAST:event_EncodeButtonActionPerformed

    private void DecodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecodeButtonActionPerformed
        
        if(decode() == 0){
            reset();
        }
        
    }//GEN-LAST:event_DecodeButtonActionPerformed

    private void EncodeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncodeMenuItemActionPerformed

        if(encode() == 0){
            reset();
        }
        
    }//GEN-LAST:event_EncodeMenuItemActionPerformed

    private void BuffersSizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuffersSizeButtonActionPerformed
        
        readBufferSize();
        
    }//GEN-LAST:event_BuffersSizeButtonActionPerformed

    private void KBRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KBRadioButtonActionPerformed

        BufferSizeLabel.setText("= " + steganography.core.Steganography.KB);
        
    }//GEN-LAST:event_KBRadioButtonActionPerformed

    private void MBRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBRadioButtonActionPerformed

        BufferSizeLabel.setText("= " + steganography.core.Steganography.MB);
        
    }//GEN-LAST:event_MBRadioButtonActionPerformed

    private void GBRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GBRadioButtonActionPerformed

        BufferSizeLabel.setText("= " + steganography.core.Steganography.GB);
        
    }//GEN-LAST:event_GBRadioButtonActionPerformed

    private void BufferSizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BufferSizeMenuItemActionPerformed

        readBufferSize();
        
    }//GEN-LAST:event_BufferSizeMenuItemActionPerformed

    private void DecodeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecodeMenuItemActionPerformed

        if (decode() == 0) {
            reset();
        }

    }//GEN-LAST:event_DecodeMenuItemActionPerformed

    private int encode(){
        
        if(KEY == -1){
            JOptionPane.showMessageDialog(null, "Input a key", "Missing Key", JOptionPane.ERROR_MESSAGE);
            return 1;
        }
        
        if(COVER_FILE == null){
            JOptionPane.showMessageDialog(null, "Input Location for Cover File", "Missing Cover File", JOptionPane.ERROR_MESSAGE);
            return 2;
        }
        
        if(DATA_FILE == null){
            JOptionPane.showMessageDialog(null, "Input Location for Data File", "Missing Data File", JOptionPane.ERROR_MESSAGE);
            return 3;
        }
        
        if(DESTINATION_FILE == null){
            JOptionPane.showMessageDialog(null, "Input Location for Destination File", "Missing Destination File", JOptionPane.ERROR_MESSAGE);
            return 4;
        }
        
        steganography.core.Steganography steg = new steganography.core.Steganography();
        
        if(OFFSET != -1){
            steg.setOffset(OFFSET);
            System.out.println("offset " + OFFSET);
        }
        if(BUFFER_CAPACITY != -1){
            steg.setBufferCapacity(BUFFER_CAPACITY);
            System.out.println("buffer " + BUFFER_CAPACITY);
        }
        // checch here
        steg.setOffset(500 * KB);
        try {
            System.out.println("cover: " + COVER_FILE.getAbsolutePath());
            System.out.println("data: " + DATA_FILE.getAbsolutePath());
            System.out.println("dest: " + DESTINATION_FILE.getAbsolutePath());
            System.out.println("key " + KEY);
            System.out.println("offset " + OFFSET);
            System.out.println("buffer " + BUFFER_CAPACITY);
            
            steg.encode(COVER_FILE.getPath(), DATA_FILE.getPath(), DESTINATION_FILE.getPath(), KEY);
            
        } 
        catch (InsufficientMemoryException | IOException | UnsupportedFileException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR!!", JOptionPane.ERROR_MESSAGE);
        }
        
        return 0;
    }
    
    private int decode(){
        
        if(KEY == -1){
            JOptionPane.showMessageDialog(null, "Input a key", "Missing Key", JOptionPane.ERROR_MESSAGE);
            return 1;
        }
        
        if(COVER_FILE == null){
            JOptionPane.showMessageDialog(null, "Input Location for Cover File", "Missing Cover File", JOptionPane.ERROR_MESSAGE);
            return 2;
        }
        
        if(DATA_FILE == null){
            JOptionPane.showMessageDialog(null, "Input Location for Data File", "Missing Data File", JOptionPane.ERROR_MESSAGE);
            return 3;
        }
        
        if(DESTINATION_FILE == null){
            JOptionPane.showMessageDialog(null, "Input Location for Destination File", "Missing Destination File", JOptionPane.ERROR_MESSAGE);
            return 4;
        }
        
        steganography.core.Steganography steg = new steganography.core.Steganography();
       
        try {
            steg.decode(COVER_FILE.getPath(), DESTINATION_FILE.getPath(), KEY);
        } 
        catch (UnsupportedFileException | IOException | InsufficientBitsException | InvalidKeyException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR!!", JOptionPane.ERROR_MESSAGE);
        }
        
        return 0;
    }
    
    private void readKey() {
        String returnVal;
        do {
            returnVal = JOptionPane.showInputDialog(null, "Input Key", "KEY", JOptionPane.QUESTION_MESSAGE);
            if (returnVal == null) {
                break;
            } else {
                if (!returnVal.isEmpty() && returnVal.matches("^[0-9]*")) {
                    try {
                        int key = Integer.parseInt(returnVal);
                        if (key == 0) {
                            JOptionPane.showMessageDialog(null, "Key cannot be zero!", "Invalid Key!", JOptionPane.WARNING_MESSAGE);
                        } 
                        else {
                            KEY = key;
                            printKey();
                            break;
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Input a key from 1 to " + Integer.MAX_VALUE + " only.", "Input Valid Key", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Input a key from 1 to " + Integer.MAX_VALUE + " only.", "Input Valid Key", JOptionPane.INFORMATION_MESSAGE);
                }

            }
        } while (true);
    }
    
    private void readOffset() {
        String returnVal;
        do {
            returnVal = JOptionPane.showInputDialog(null, "Input Offset", "OFFSET", JOptionPane.QUESTION_MESSAGE);
            if (returnVal == null) {
                break;
            } else {
                if (!returnVal.isEmpty() && returnVal.matches("^[0-9]*")) {
                    try {
                        int offset = Integer.parseInt(returnVal);
                        if (offset < 0) {
                            JOptionPane.showMessageDialog(null, "Offset cannot be negative!", "Invalid Offset!", JOptionPane.WARNING_MESSAGE);
                        } 
                        else {
                            OFFSET = offset;
                            OffsetLabel.setText("= " + OFFSET);
                            break;
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Input offset from 0 to " + Integer.MAX_VALUE + " only.", "Input Valid Offset", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Input offset from 0 to " + Integer.MAX_VALUE + " only.", "Input Valid Offset", JOptionPane.INFORMATION_MESSAGE);
                }

            }
        } while (true);
    }
    
     private void readBufferSize() {
        String returnVal;
        do {
            returnVal = JOptionPane.showInputDialog(null, "Input Buffer Capacity", "BUFFER", JOptionPane.QUESTION_MESSAGE);
            if (returnVal == null) {
                break;
            } else {
                if (!returnVal.isEmpty() && returnVal.matches("^[0-9]*")) {
                    try {
                        int buffer_capacity = Integer.parseInt(returnVal);
                        if (buffer_capacity < 64) {
                            JOptionPane.showMessageDialog(null, "Buffer Size cannot be less than 64!", "Invalid Buffer Size!", JOptionPane.WARNING_MESSAGE);
                        } 
                        else {
                            BUFFER_CAPACITY = buffer_capacity;
                            BufferSizeLabel.setText("= " + BUFFER_CAPACITY);
                            BufferCapacitybuttonGroup.clearSelection();
                            break;
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Input Buffer Size from 64 to " + Integer.MAX_VALUE + " only.", "Invalid Buffer Size!", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Input Buffer Size from 64 to " + Integer.MAX_VALUE + " only.", "Invalid Buffer Size!", JOptionPane.INFORMATION_MESSAGE);
                }

            }
        } while (true);
    }
    
    
    private void openCoverFile() {
        JFileChooser chooser = new JFileChooser(".");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Open Cover File.");
        chooser.setAcceptAllFileFilterUsed(true);

        int selection = chooser.showOpenDialog(null);

        if (selection == JFileChooser.APPROVE_OPTION) {
            COVER_FILE = chooser.getSelectedFile();
            if (COVER_FILE.exists()) {
                CoverFilePath.setText(COVER_FILE.getAbsolutePath());
                CoverFilePath.setToolTipText(COVER_FILE.getAbsolutePath());
            } 
            else {
                COVER_FILE = null;
                JOptionPane.showMessageDialog(null, "File does not exists!", "ERROR!!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void openDataFile() {
        JFileChooser chooser = new JFileChooser(".");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Open Data File.");
        
        chooser.setAcceptAllFileFilterUsed(true);
        
        int selection = chooser.showOpenDialog(null);

        if (selection == JFileChooser.APPROVE_OPTION) {
            DATA_FILE = chooser.getSelectedFile();
            if (DATA_FILE.exists()) {
                DataFilePath.setText(DATA_FILE.getAbsolutePath());
                DataFilePath.setToolTipText(DATA_FILE.getAbsolutePath());
            } 
            else {
                DATA_FILE = null;
                JOptionPane.showMessageDialog(null, "File does not exists!", "ERROR!!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    
    private void setDestination() throws IOException {
        JFileChooser chooser = new JFileChooser(".");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Save Encoded File.");
        
        chooser.setAcceptAllFileFilterUsed(false);
        setImageFileExtension(chooser, false);
        
        int selection = chooser.showSaveDialog(null);

        if (selection == JFileChooser.APPROVE_OPTION) {
            DESTINATION_FILE = chooser.getSelectedFile();
            if (DESTINATION_FILE.exists()) {
                
                int choice = JOptionPane.showConfirmDialog(null, "File already exists. \nDo you want to replace it??", "Confirm Save??", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                    DESTINATION_FILE = null;
                }
                else{
                    DESTINATION_FILE.delete();
                    DESTINATION_FILE.createNewFile();
                    DestinationPath.setText(DESTINATION_FILE.getAbsolutePath());
                    DestinationPath.setToolTipText(DESTINATION_FILE.getAbsolutePath());
                }
            } 
            else {
                DESTINATION_FILE.createNewFile();
                DestinationPath.setText(DESTINATION_FILE.getAbsolutePath());
                DestinationPath.setToolTipText(DESTINATION_FILE.getAbsolutePath());
            }
        }
    }

    private void printKey(){
        
        if(ShowHideKeyToggleButton.isSelected()){
            KeyLabel.setText("= " + KEY);
        }
        else{
            int key = KEY;
            int count = 0;

            while(key > 0){
                count++;
                key /= 10;
            }
            
            char[] hidden_key = new char[count];
            for(int i = 0; i < count; i++){
                hidden_key[i] = '*';
            }
            
            KeyLabel.setText("= " + new String(hidden_key));
            
        }
    }
    
    private void reset(){
        KEY = -1;
        OFFSET = -1;
        BUFFER_CAPACITY = -1;
        COVER_FILE = null;
        DATA_FILE = null;
        DESTINATION_FILE = null;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Steganography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Steganography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Steganography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Steganography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Steganography().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.ButtonGroup BufferCapacitybuttonGroup;
    private javax.swing.JLabel BufferSizeLabel;
    private javax.swing.JMenu BufferSizeMenu;
    private javax.swing.JMenuItem BufferSizeMenuItem;
    private javax.swing.JButton BuffersSizeButton;
    private javax.swing.JButton CoverFileButton;
    private javax.swing.JLabel CoverFileLabel;
    private javax.swing.JMenuItem CoverFileMenuItem;
    private javax.swing.JLabel CoverFilePath;
    private javax.swing.JButton DataFileButton;
    private javax.swing.JLabel DataFileLabel;
    private javax.swing.JMenuItem DataFileMenuItem;
    private javax.swing.JLabel DataFilePath;
    private javax.swing.JButton DecodeButton;
    private javax.swing.JMenuItem DecodeMenuItem;
    private javax.swing.JButton DestinationButton;
    private javax.swing.JLabel DestinationLabel;
    private javax.swing.JMenuItem DestinationMenuItem;
    private javax.swing.JLabel DestinationPath;
    private javax.swing.JButton EncodeButton;
    private javax.swing.JMenuItem EncodeMenuItem;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JRadioButton GBRadioButton;
    private javax.swing.JRadioButton KBRadioButton;
    private javax.swing.JButton KeyButton;
    private javax.swing.JLabel KeyLabel;
    private javax.swing.JMenuItem KeyMenuItem;
    private javax.swing.JRadioButton MBRadioButton;
    private javax.swing.JMenuBar MainMenuBar;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton OffsetButton;
    private javax.swing.JLabel OffsetLabel;
    private javax.swing.JMenuItem OffsetMenuItem;
    private javax.swing.JToggleButton ShowHideKeyToggleButton;
    private javax.swing.JLabel backgroundImageLabel;
    // End of variables declaration//GEN-END:variables
}
